Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     expression -> ID
Rule 3     expression -> LBRKT ID RBRKT
Rule 4     expression -> MINUS expression
Rule 5     expression -> expression PLUS expression
Rule 6     expression -> expression MINUS expression
Rule 7     expression -> expression TIMES expression
Rule 8     expression -> expression DIVIDE expression
Rule 9     expression -> expression POWER NUMBER
Rule 10    expression -> LPAREN expression RPAREN
Rule 11    expression -> NUMBER
Rule 12    expression -> CONST
Rule 13    expression -> ID LPAREN arguments RPAREN
Rule 14    arguments -> argument
Rule 15    arguments -> arguments COMMA argument
Rule 16    argument -> expression

Terminals, with rules where they appear

COMMA                : 15
CONST                : 12
DIVIDE               : 8
ID                   : 2 3 13
LBRKT                : 3
LPAREN               : 10 13
MINUS                : 4 6
NUMBER               : 9 11
PLUS                 : 5
POWER                : 9
RBRKT                : 3
RPAREN               : 10 13
TIMES                : 7
error                : 

Nonterminals, with rules where they appear

argument             : 14 15
arguments            : 13 15
expression           : 1 4 5 5 6 6 7 7 8 8 9 10 16
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) expression -> . ID
    (3) expression -> . LBRKT ID RBRKT
    (4) expression -> . MINUS expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression POWER NUMBER
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . CONST
    (13) expression -> . ID LPAREN arguments RPAREN

    ID              shift and go to state 3
    LBRKT           shift and go to state 4
    MINUS           shift and go to state 5
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 6
    CONST           shift and go to state 8

    statement                      shift and go to state 1
    expression                     shift and go to state 2

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . POWER NUMBER

    $end            reduce using rule 1 (statement -> expression .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    POWER           shift and go to state 13


state 3

    (2) expression -> ID .
    (13) expression -> ID . LPAREN arguments RPAREN

    PLUS            reduce using rule 2 (expression -> ID .)
    MINUS           reduce using rule 2 (expression -> ID .)
    TIMES           reduce using rule 2 (expression -> ID .)
    DIVIDE          reduce using rule 2 (expression -> ID .)
    POWER           reduce using rule 2 (expression -> ID .)
    $end            reduce using rule 2 (expression -> ID .)
    RPAREN          reduce using rule 2 (expression -> ID .)
    COMMA           reduce using rule 2 (expression -> ID .)
    LPAREN          shift and go to state 14


state 4

    (3) expression -> LBRKT . ID RBRKT

    ID              shift and go to state 15


state 5

    (4) expression -> MINUS . expression
    (2) expression -> . ID
    (3) expression -> . LBRKT ID RBRKT
    (4) expression -> . MINUS expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression POWER NUMBER
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . CONST
    (13) expression -> . ID LPAREN arguments RPAREN

    ID              shift and go to state 3
    LBRKT           shift and go to state 4
    MINUS           shift and go to state 5
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 6
    CONST           shift and go to state 8

    expression                     shift and go to state 16

state 6

    (11) expression -> NUMBER .

    PLUS            reduce using rule 11 (expression -> NUMBER .)
    MINUS           reduce using rule 11 (expression -> NUMBER .)
    TIMES           reduce using rule 11 (expression -> NUMBER .)
    DIVIDE          reduce using rule 11 (expression -> NUMBER .)
    POWER           reduce using rule 11 (expression -> NUMBER .)
    $end            reduce using rule 11 (expression -> NUMBER .)
    RPAREN          reduce using rule 11 (expression -> NUMBER .)
    COMMA           reduce using rule 11 (expression -> NUMBER .)


state 7

    (10) expression -> LPAREN . expression RPAREN
    (2) expression -> . ID
    (3) expression -> . LBRKT ID RBRKT
    (4) expression -> . MINUS expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression POWER NUMBER
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . CONST
    (13) expression -> . ID LPAREN arguments RPAREN

    ID              shift and go to state 3
    LBRKT           shift and go to state 4
    MINUS           shift and go to state 5
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 6
    CONST           shift and go to state 8

    expression                     shift and go to state 17

state 8

    (12) expression -> CONST .

    PLUS            reduce using rule 12 (expression -> CONST .)
    MINUS           reduce using rule 12 (expression -> CONST .)
    TIMES           reduce using rule 12 (expression -> CONST .)
    DIVIDE          reduce using rule 12 (expression -> CONST .)
    POWER           reduce using rule 12 (expression -> CONST .)
    $end            reduce using rule 12 (expression -> CONST .)
    RPAREN          reduce using rule 12 (expression -> CONST .)
    COMMA           reduce using rule 12 (expression -> CONST .)


state 9

    (5) expression -> expression PLUS . expression
    (2) expression -> . ID
    (3) expression -> . LBRKT ID RBRKT
    (4) expression -> . MINUS expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression POWER NUMBER
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . CONST
    (13) expression -> . ID LPAREN arguments RPAREN

    ID              shift and go to state 3
    LBRKT           shift and go to state 4
    MINUS           shift and go to state 5
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 6
    CONST           shift and go to state 8

    expression                     shift and go to state 18

state 10

    (6) expression -> expression MINUS . expression
    (2) expression -> . ID
    (3) expression -> . LBRKT ID RBRKT
    (4) expression -> . MINUS expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression POWER NUMBER
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . CONST
    (13) expression -> . ID LPAREN arguments RPAREN

    ID              shift and go to state 3
    LBRKT           shift and go to state 4
    MINUS           shift and go to state 5
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 6
    CONST           shift and go to state 8

    expression                     shift and go to state 19

state 11

    (7) expression -> expression TIMES . expression
    (2) expression -> . ID
    (3) expression -> . LBRKT ID RBRKT
    (4) expression -> . MINUS expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression POWER NUMBER
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . CONST
    (13) expression -> . ID LPAREN arguments RPAREN

    ID              shift and go to state 3
    LBRKT           shift and go to state 4
    MINUS           shift and go to state 5
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 6
    CONST           shift and go to state 8

    expression                     shift and go to state 20

state 12

    (8) expression -> expression DIVIDE . expression
    (2) expression -> . ID
    (3) expression -> . LBRKT ID RBRKT
    (4) expression -> . MINUS expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression POWER NUMBER
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . CONST
    (13) expression -> . ID LPAREN arguments RPAREN

    ID              shift and go to state 3
    LBRKT           shift and go to state 4
    MINUS           shift and go to state 5
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 6
    CONST           shift and go to state 8

    expression                     shift and go to state 21

state 13

    (9) expression -> expression POWER . NUMBER

    NUMBER          shift and go to state 22


state 14

    (13) expression -> ID LPAREN . arguments RPAREN
    (14) arguments -> . argument
    (15) arguments -> . arguments COMMA argument
    (16) argument -> . expression
    (2) expression -> . ID
    (3) expression -> . LBRKT ID RBRKT
    (4) expression -> . MINUS expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression POWER NUMBER
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . CONST
    (13) expression -> . ID LPAREN arguments RPAREN

    ID              shift and go to state 3
    LBRKT           shift and go to state 4
    MINUS           shift and go to state 5
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 6
    CONST           shift and go to state 8

    arguments                      shift and go to state 23
    argument                       shift and go to state 24
    expression                     shift and go to state 25

state 15

    (3) expression -> LBRKT ID . RBRKT

    RBRKT           shift and go to state 26


state 16

    (4) expression -> MINUS expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . POWER NUMBER

    PLUS            reduce using rule 4 (expression -> MINUS expression .)
    MINUS           reduce using rule 4 (expression -> MINUS expression .)
    TIMES           reduce using rule 4 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 4 (expression -> MINUS expression .)
    POWER           reduce using rule 4 (expression -> MINUS expression .)
    $end            reduce using rule 4 (expression -> MINUS expression .)
    RPAREN          reduce using rule 4 (expression -> MINUS expression .)
    COMMA           reduce using rule 4 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! POWER           [ shift and go to state 13 ]


state 17

    (10) expression -> LPAREN expression . RPAREN
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . POWER NUMBER

    RPAREN          shift and go to state 27
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    POWER           shift and go to state 13


state 18

    (5) expression -> expression PLUS expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . POWER NUMBER

    PLUS            reduce using rule 5 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 5 (expression -> expression PLUS expression .)
    $end            reduce using rule 5 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 5 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 5 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    POWER           shift and go to state 13

  ! TIMES           [ reduce using rule 5 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 5 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]


state 19

    (6) expression -> expression MINUS expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . POWER NUMBER

    PLUS            reduce using rule 6 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 6 (expression -> expression MINUS expression .)
    $end            reduce using rule 6 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 6 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 6 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    POWER           shift and go to state 13

  ! TIMES           [ reduce using rule 6 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 6 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 6 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]


state 20

    (7) expression -> expression TIMES expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . POWER NUMBER

    PLUS            reduce using rule 7 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 7 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 7 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 7 (expression -> expression TIMES expression .)
    $end            reduce using rule 7 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 7 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 7 (expression -> expression TIMES expression .)
    POWER           shift and go to state 13

  ! POWER           [ reduce using rule 7 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]


state 21

    (8) expression -> expression DIVIDE expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . POWER NUMBER

    PLUS            reduce using rule 8 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 8 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 8 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 8 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 8 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 8 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 8 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 13

  ! POWER           [ reduce using rule 8 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]


state 22

    (9) expression -> expression POWER NUMBER .

    PLUS            reduce using rule 9 (expression -> expression POWER NUMBER .)
    MINUS           reduce using rule 9 (expression -> expression POWER NUMBER .)
    TIMES           reduce using rule 9 (expression -> expression POWER NUMBER .)
    DIVIDE          reduce using rule 9 (expression -> expression POWER NUMBER .)
    POWER           reduce using rule 9 (expression -> expression POWER NUMBER .)
    $end            reduce using rule 9 (expression -> expression POWER NUMBER .)
    RPAREN          reduce using rule 9 (expression -> expression POWER NUMBER .)
    COMMA           reduce using rule 9 (expression -> expression POWER NUMBER .)


state 23

    (13) expression -> ID LPAREN arguments . RPAREN
    (15) arguments -> arguments . COMMA argument

    RPAREN          shift and go to state 28
    COMMA           shift and go to state 29


state 24

    (14) arguments -> argument .

    RPAREN          reduce using rule 14 (arguments -> argument .)
    COMMA           reduce using rule 14 (arguments -> argument .)


state 25

    (16) argument -> expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . POWER NUMBER

    RPAREN          reduce using rule 16 (argument -> expression .)
    COMMA           reduce using rule 16 (argument -> expression .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    POWER           shift and go to state 13


state 26

    (3) expression -> LBRKT ID RBRKT .

    PLUS            reduce using rule 3 (expression -> LBRKT ID RBRKT .)
    MINUS           reduce using rule 3 (expression -> LBRKT ID RBRKT .)
    TIMES           reduce using rule 3 (expression -> LBRKT ID RBRKT .)
    DIVIDE          reduce using rule 3 (expression -> LBRKT ID RBRKT .)
    POWER           reduce using rule 3 (expression -> LBRKT ID RBRKT .)
    $end            reduce using rule 3 (expression -> LBRKT ID RBRKT .)
    RPAREN          reduce using rule 3 (expression -> LBRKT ID RBRKT .)
    COMMA           reduce using rule 3 (expression -> LBRKT ID RBRKT .)


state 27

    (10) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 10 (expression -> LPAREN expression RPAREN .)


state 28

    (13) expression -> ID LPAREN arguments RPAREN .

    PLUS            reduce using rule 13 (expression -> ID LPAREN arguments RPAREN .)
    MINUS           reduce using rule 13 (expression -> ID LPAREN arguments RPAREN .)
    TIMES           reduce using rule 13 (expression -> ID LPAREN arguments RPAREN .)
    DIVIDE          reduce using rule 13 (expression -> ID LPAREN arguments RPAREN .)
    POWER           reduce using rule 13 (expression -> ID LPAREN arguments RPAREN .)
    $end            reduce using rule 13 (expression -> ID LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 13 (expression -> ID LPAREN arguments RPAREN .)
    COMMA           reduce using rule 13 (expression -> ID LPAREN arguments RPAREN .)


state 29

    (15) arguments -> arguments COMMA . argument
    (16) argument -> . expression
    (2) expression -> . ID
    (3) expression -> . LBRKT ID RBRKT
    (4) expression -> . MINUS expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression POWER NUMBER
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . CONST
    (13) expression -> . ID LPAREN arguments RPAREN

    ID              shift and go to state 3
    LBRKT           shift and go to state 4
    MINUS           shift and go to state 5
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 6
    CONST           shift and go to state 8

    argument                       shift and go to state 30
    expression                     shift and go to state 25

state 30

    (15) arguments -> arguments COMMA argument .

    RPAREN          reduce using rule 15 (arguments -> arguments COMMA argument .)
    COMMA           reduce using rule 15 (arguments -> arguments COMMA argument .)

